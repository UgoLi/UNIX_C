回忆上周五的内容：
一、进程的退出 on_exit _exit
二、回收子进程的资源
wait(2) waitpid(2)
三、加载新映像
exec(3)家族函数
四、环境变量

bash有内部命令和外部命令

今天内容：
一、使用system调用命令或者脚本文件
#include <stdlib.h>
int system(const char *command);
功能：执行一个shell命令。命令(linux命令和脚本文件)
参数：
command：指定要执行的命令
命令的执行方式是 /bin/sh -c command
返回值：
-1   错误
返回命令执行的状态码。

当前运行环境 bash
运行ls命令 bash fork exec ls
system(ls);
bash->fork->exec->a.out->fork->exec->sh->fork->exec->ls

bash和sh 是两个不同的shell。脚本的语法会有差别。

举例说明  system(3)的使用
代码参见  system.c test.c

调用system(3)在sh中运行
gnome-terminal-─┬─bash───a.out───sh───t
execlp(3)加载新映像，覆盖a.out
gnome-terminal-─┬─bash───t

此处 t 是脚本文件  在 sh 和 bash 两个不同的shell上运行


二、管道  进程间的通讯
无名管道
使用pipe(2)创建无名管道，实质是内核管理的一块空间。将这块空间虚拟为文件
管理。
#include <unistd.h>
int pipe(int pipefd[2]);
功能：创建一个管道
参数：
pipefd[2];是一个数组，数组有两个元素，每个元素都是int类型的。
            两个元素是是做什么的？
            这个管道是单工的。只能一个方向传输。pipefd[0]指向管道的读端
            。pipefd[1]指向管道的写端。
返回值：
0 成功
-1 失败 errno被设置
使用无名管道实现进程间通讯。
使用无名管道通讯的进程必须具有亲緣关系。
父子关系  兄弟关系
步骤：
(一)、在父进程中创建管道。
(二)、fork创建子进程。
子进程从父进程继承了管道的两个文件描述符-->读端和写端
(三)、父进程负责的工作。
关闭读端。
父进程向管道里写数据。
等待子进程的结束，收尸，回收子进程的资源。
(四)、子进程负责的工作。
关闭写端。
从管道里读取数据。
处理数据。
子进程结束。

代码参见  pipe.c

有名管道
用于通讯的一个文件，一个进程打开文件读，一个进程打开文件写。
这个文件在用户空间，是可以看见的。通讯的两个进程不一定具有亲缘关系。

如何创建一个管道文件？
mkfifo(3)
#include <sys/types.h>
#include <sys/stat.h>
int mkfifo(const char *pathname, mode_t mode);
功能：创建一个队列文件，先进先出。有名管道文件
参数：
pathname：指定了要创建的管道文件的名字
mode：指定了管道文件的权限。mode & ~umask.
返回值：
0  成功
-1 错误，errno被设置。

举例说明   管道文件的创建  代码参见 c_fifo.c
进程A向管道文件写入数据。  代码参见 pA.c
进程B从管道读取数据并输出到显示器。 pB.c

有名管道文件只是起中间传输的桥梁作用，该文件没有内容。
可以运用于没有亲缘关系的进程间通讯。

三、文件输入重定向的实现
文件重定向--> 输出重定向  输入重定向

举例说明  文件输入重定向的实现原理。
代码参见  upper.c  wrap.c

Ctrl+d-->EOF
将字符转换为大写
#include <ctype.h>
int toupper(int c);
int tolower(int c);
进程就结束

编写自己的shell，实现部分bash的功能。内部命令 外部命令
内部命令 实现cd的功能
外部命令 全部实现
day0708-UC$:ps -o pid,ppid,pgrp,comm
PID   PPID   PGRP COMMAND
5504   3695   5504 bash
6536   5504   6536 ps
 day0708-UC$:

第一阶段：
首先写代码，实现打印提示符，等待用户的输入
char* ps_argv[]={"ps","-o","pid,ppid,pgrp,comm",NULL};
检测 ps 
    是内部命令，对应一个函数的实现
    
    不是内部，fork创建子进程，在子进程中，执行execvp().
    在父进程等待子进程的结束。

第二阶段 将文件重定向的功能添加进去

第三阶段 将管道的功能添加进去


四、信号
什么是信号？
信号就是软中断？
什么是软中断？
就是软件实现的中断机制。

什么是中断？
中断服务程序。中断以后用服务处理中断后的事件。
信号处理程序。
linux系统为用户提供了哪些信号？
kill -l  查看命令
信号有编号和名字
64个信号，其中32、33没有

信号从产生到结束的过程
信号的产生、信号的阻塞、信号的未决状态、信号的递达、信号的处理

Ctrl+c   2   
Ctrl+\   3
信号的处理
信号到达进程以后，启动信号的处理程序来处理信号。
由于我们启动的进程都是在bash下，进程属于bash的子进程。
子进程继承父进程的信号处理程序。
进程对信号的处理程序，默认是终止当前进程。
SIG_DFL   缺省的信号的处理程序  
SIG_IGN   忽略信号
用户自定义信号处理程序。

用户是否可以改变信号的处理程序？
signal(2)
#include <signal.h>
typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
功能：向进程注册信号的处理函数，用于信号到达的时候，调用这个处理函数。
参数：
signum：信号编号
handler：
SIG_DFL   缺省的信号的处理程序  
SIG_IGN   忽略信号
用户自定义信号处理程序

返回值：
错误  SIG_ERR
返回旧的信号处理函数

注意：SIGKILL 和 SIGSTOP不能被捕获也不能被忽略。

举例说明  使用signal改变信号的处理函数。
代码参见 signal.c

总结：
一、system(3)的使用。  /bin/sh -c command
二、管道   有名  无名
无名管道主要用于具有亲缘关系的进程间通讯。 单工的
如果想完成两个进程间的双工通讯。-->创建两管道
有名管道用于进程间通讯，有无亲缘关系不重要，只是一个用于进程间通讯的
    管道文件而已
三、文件输入重定向。
文件重定向就是改变文件流的流向。
四、信号的基础

什么是信号？信号的处理程序。
信号从产生到结束的周期。
信号的捕获（处理）
SIG_DFL   
SIG_IGN
用户自定义信号处理函数。

子进程继续了父进程的信号处理函数。
举例说明  子进程继承父进程的信号处理函数。
代码参见  fork_sig.c










