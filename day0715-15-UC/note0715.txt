昨天内容回忆：
一、基于TCP的服务器并发的实现
多进程    父进程负责什么？   子进程负责哪些工作？
二、基于UDP的服务器端和客户端编程
tcp和udp的区别
三、线程的基础
1、线程的创建
2、线程的退出
3、线程的的等待、分离。


今天的内容：
一、可重入函数的使用
线程函数尽量保持线程函数的可重入行
举例说明  不可重入函数造成的临界资源访问的问题。
代码参见  count.c


二、线程同步
mutex锁
1、当一个线程使用临界资源的时候，为该资源加锁
2、加锁以后使用该资源
3、使用完毕，线程对资源解锁

mutex锁  是类型
pthread_mutex_t
关于这种类型的操作
pthread_mutex_init(3)****************************************************
#include<pthread.h>
    pthread_mutex_t  mutex=PTHREAD_MUTEX_INITIALIZER;
    功能：静态初始化mutex锁
    int pthread_mutex_init(pthread_mutex_t *mutex,\
                       const pthread_mutexattr_t *mutexattr);
    功能：初始化一个mutex锁
    参数：
    mutex:指定初始化的mutex锁
    mutexattr：指定mutex的属性，用这个属性初始化mutex锁。
                NULL  缺省的属性
    返回值：
    总是返回   0
*************************************************************************

pthread_mutex_lock(3)****************************************************
#include<pthread.h>
    int pthread_mutex_lock(pthread_mutex_t *mutex);
    功能：将mutex设置为locked状态。如果原来mutex锁是unlocked的状态，立即
            加锁，并返回，如果原来mutex为locked状态，挂起等待mutex变为unlocked
            状态。
    参数：
    mutex：指定了要设置为locked状态的mutex锁
    返回值：
    0     成功
    非0   错误

*************************************************************************

pthread_mutex_trylock(3)****************************************************
#include<pthread.h>
    int pthread_mutex_trylock(pthread_mutex_t *mutex);
    功能：将mutex设置为locked状态。如果原来mutex锁是unlocked的状态，立即      
          加锁，并返回，如果原来mutex为locked状态，立即返回错误。errno被设置为
          EBUSY。  
    参数：
    mutex：指定了要设置为locked的mutex锁。
    返回值：
    0     成功
    非0   错误

*************************************************************************

pthread_mutex_unlock(3)**************************************************
#include<pthread.h>
    int pthread_mutex_unlock(pthread_mutex_t *mutex);
    功能：将mutex解锁。设置为unlocked状态
    参数：
    mutex：指定要解开的mutex锁
    返回值：
    0     成功
    非0   错误

*************************************************************************

pthread_mutex_destroy(3)****************************************************
#include<pthread.h>
    int pthread_mutex_destroy(pthread_mutex_t *mutex);
    功能：销毁mutex对象
    参数：
    mutex：指定要销毁的mutex对象
    返回值：
    0     成功
    非0   错误

*************************************************************************
以上这些函数都是对pthread_mutex_t类型变量的操作。
一定要注意锁的范围。
使用到临界资源的时候，加锁;不使用临界资源的时候解锁。

条件变量
线程间同步的一种情况，有两个线程A和B。线程A需要等某个条件成立的时候，
才能继续往下执行，这时候，条件不成立，线程A阻塞等待。线程B的执行使这
个条件变为成立。线程A得知条件成立了，线程A继续往下执行。
这样的情况称为条件变量。

pthread_cond_t  类型  系统定义的类型。
提供了这些类型的操作系统
pthread_cond_init(3)*****************************************************
#include<pthread.h>
pthread_cond_t cond=PTHREAD_COND_INITIALZER;//条件变量的静态初始化
    int pthread_cond_init(pthread_cond_t *cond,pthread_condattr_t *cond_attr);
    功能：初始化条件变量
    参数：
    cond：指定要初始化的条件变量
    cond_attr：指定条件变量的属性  NULL  默认属性
    返回值：
    0    成功
    非0  错误码
*************************************************************************

pthread_cond_signal(3)***************************************************
#include<pthread,h>
    int pthread_cond_signal(pthread_cond_t *cond);
    功能：启动一个线程，等待条件变量为真的线程
    参数：
    cond：指定条件变量。在这个条件变量上的等待的一个线程
    返回值：
    0    成功
    非0  错误码

*************************************************************************

pthread_cond_broadcast(3)************************************************
#include<pthread,h>
    int pthread_cond_broadcast(pthread_cond_t *cond);
    功能：启动所有的线程，这些线程是等待条件变量为真的所有的线程。
    参数：
    cond：指定了条件变量，在这个条件变量上等待的所有线程
    返回值：
    0    成功
    非0  错误码

*************************************************************************

pthread_cond_wait(3)*****************************************************
#include<pthread,h>
    int pthread_cond_wait(pthread_cond_t *cond,pthread_mutex_t *mutex);
    功能：条件变量不为真的时候，打开mutex锁，等待条件变量为真
    mutex：指定一个mutex锁,等待之前需要解开的锁
    cond：指定要等待的条件变量
    参数：
    返回值：
    0    成功
    非0  错误码

备注：
1、先解开mutex锁
2、阻塞等待条件变量为真
3、加锁
*************************************************************************

pthread_cond_timedwait(3)************************************************
#include<pthread,h>
    int pthread_cond_timedwait(pthread_cond_t *cond,pthread_mutex_t *mutex,\
                             const struct timespec *abstime );
    功能：在指定时间内等待，超时返回错误。其他同上个函数
    参数：
    cond：指定要等待的条件变量
    mutex：等待之前需要解开的utex锁
    abstime：指定了要等待的时间，超时报错
    返回值：
    0    成功
    非0  错误码

*************************************************************************

pthread_cond_destroy(3)**************************************************
#include<pthread,h>
    int pthread_cond_destroy(pthread_cond_t *cond);
    功能：销毁条件变量
    参数：
    cond：指定要销毁的条件变量
    返回值：
    0    成功
    非0  错误码

*************************************************************************

补充：
线程的实现
LinuxThreads：2.4
NPTL：2.6版本以后


系统组装LFS
信号量
信号量是指有多个相同的资源，多个线程竞争多个资源。在可用资源数为0的情况下，
线程等待。线程获取一个资源，可用资源数减1。当线程释放一个资源的时候，
可用资源数加1。

系统对于信号量的操作提供了以下函数：
sem_t  信号量的类型
sem_init(3)***************************************************************
#include <semaphore.h>
    int sem_init(sem_t *sem, int pshared, unsigned int value);
    功能：初始化一个匿名的信号量
    参数：
     sem：指定要初始化的信号量变量的地址。
    pshared：
    0    多线程
    非0  多进程
    value：指定了信号量的初始值。信号量提供的资源数。
    返回值：
    0   成功
    -1  错误  errno被设置

既能应用于多线程，又能应用于多进程
Link with -pthread.
**************************************************************************

sem_destroy(3)************************************************************
#include <semaphore.h>
    int sem_destroy(sem_t *sem);
    功能：销毁一个匿名信号量
    参数：
    sem：指定要销毁的信号量地址
    返回值：
    0  成功
    -1 错误  errno被设置

Link with -pthread.
**************************************************************************

sem_post(3)***************************************************************
#include <semaphore.h>
    int sem_post(sem_t *sem);
    功能：解锁一个信号量。
    参数：
    sem：指定要解锁的信号量。如果信号量可用资源数大于0,调用sem_wait等待的
            进程或线程，这时候被唤醒。
    返回值：
    0   成功
    -1  错误  errno被设置

信号量的解锁--：
increments  信号量的值增加，可用资源数+1.
Link with -pthread.
**************************************************************************

sem_wait(3)***************************************************************
#include <semaphore.h>
    int sem_wait(sem_t *sem);
    功能：锁定一个信号量。信号量的可用资源数减1.
    参数：
    sem：指定要锁定的信号量。如果可用源数大于0,立即返回。否则。阻塞等待信号
            量的值大于0.
    返回值：
    0   成功
    -1  错误  errno被设置

int sem_trywait(sem_t *sem);//非阻塞
int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);//指定阻塞时间

**************************************************************************

操作系统
pv操作

举例说明  使用信号量完成生产者和消费者的例子。
使用的数据结构是环状队列。
为了避免生产过剩，最多剩余5个资源数。
代码参见 p_c_sem.c

总结：
一、线程中的可重入函数
二、线程的同步
mutex锁
条件变量
信号量











