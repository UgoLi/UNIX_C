昨天回忆：
一、可重入函数在线程中的使用
二、线程同步
mutex锁
条件变量
信号量


今天内容：
system V IPC 信号量集
信号量集就是数组  数组里的每个成员都是信号量类型的。
如何使用信号量集完成进程间的通讯？
1、ftok(3)获取一个键值。

2、使用键值获取信号量集的id。 
semget(2)*****************************************************************
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
    int semget(key_t key, int nsems, int semflg);
    功能：获取一个信号量集的id
    参数：
    key：通过ftok获取的键值
    nsems：信号量的个数
    semflg：
    IPC_CREAT：创建新的信号量集
    IPC_EXECL: 信号量集存在则报错
    mode：指定权限
    返回值：
    返回信号量集的id，一个非负整数
    -1    错误  errno被设置
**************************************************************************

3、控制信号量集
获取到信号量集的id以后，需要对信号量集中的一个信号进行设置初值或者获取这个信号
量的semval
semctl(2)*****************************************************************
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
    int semctl(int semid, int semnum, int cmd, ...);
    功能：控制某个信号量
    参数：
    semid：指定了信号量集的id
    semnum：在信号量集的第semnum个信号量的控制
    cmd：指定了对信号量控制的命令
        GETVAL：获取信号量的semval的值
        SETVAL：设置信号量的值semval为arg.val
    ...：可变参数，参数的类型和个数取决于cmd。
    返回值：
    -1   错误  errno被设置
    如果命令是GETVAL  返回信号量的semval值
    其他命令返回 0  成功

如果有第四个参数，第四个参数的类型如下：
union semun {
        int              val;    /* Value for SETVAL */
        struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
        unsigned short  *array;  /* Array for GETALL, SETALL */
        struct seminfo  *__buf;  /* Buffer for IPC_INFO (Linux-specific) */              
 };

**************************************************************************

4、信号量集的操作，对信号量集中的某个信号量进行+-操作。
semop(2)******************************************************************
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
    int semop(int semid, struct sembuf *sops, size_t nsops);
    功能：信号量的操作   对信号量的可用资源数+-操作
    参数：
    semid：指定信号量集的id。
    sops：这个结构体指定了对某个信号量的操作,信号量结构体sembuf结构体数组的首地址。
    nsops：指定了要操作的信号量的个数，结构体数组的个数。
    返回值：
    0   成功
    -1  错误  errno被设置

strut sembuf{
    unsigned short sem_num;  /* semaphore number */
    short          sem_op;   /* semaphore operation */
    short          sem_flg;  /* operation flags */
};
sem_num：指定了要操作的第几个信号量。

sem_op：提供了三个操作
    >0  正整数  semval+sem_op的值
    =0  if semval==0  立即操作
          在semval不是0 的情况下。
            if IPC_NOWAIT被指定，失败 errno被指定为EAGAIN
            否则阻塞等待，直到semval==0.
    <0  if semval>=|sem_op| 立即处理 semval+=sem_op
        if semval<|sem_op|  指定IPC_NOWAIT  立即返回错误
                            没有指定IPC_NOWAIT  阻塞等待semval>=|sem_op|

sem_flg--信号量集中的某个信号量的semval==0时，如下操作
    0         阻塞等待
    IPC_NOWAIT：不阻塞
    SEM_UNDO：  撤销操作

**************************************************************************







举例说明   信号量集的创建  代码参见 sems_c.c
创建两个进程，pA.c负责设置信号量集中信号量的初值。  pB.c负责获取信号量集中
信号量的semval值。

在pA.c中，将信号量的值减1,休眠3s，一直循环，减到0为止。
在pB.c中，获取信号量的值，每次休眠1s。

如何删除一个system V IPC对象
ipcrm(1)

到此UC课程讲完了。




将web服务器项目布置下去
1、只能参照ppt提供的资料去完成
2、团队完成





















