今天的内容：
一、多进程访问同一个文件的时候，对文件加锁
临界资源   多个进程或线程共同竞争的资源，就是临界资源。

异步和同步 执行路线A执行完毕才能去指向执行路线B。这样的两条执行路线称为同步。多条执行路线的执行次序不确定，就称这些路线是异步的。

在文件锁中，有两种锁。读锁（共享锁） 写锁（互斥锁）
进程对文件操作的时候
1、进程对文件加锁
2、访问文件内容
3、符i文件解锁

另外分类：强制锁   建议锁
讲述系统的内容是建议锁

通过对文件描述符的设置完成对文件的加锁
系统提供了 fcntl(2)对文件描述符控制。
#include<unistd.h>
#include<fcntl.h>
int fcntl(int fd,int cmd,.../*arg*/);
功能：操作文件描述符
参数：
fd：指定文件描述符
cmd：指定对文件描述符操作的命令。+
...  可变参数，参考cmd
返回值：
成功 0
错误 -1 errno被设置



cmd： 
F_SETLK:设置锁，如果有其他进程对文件加互斥锁，立即返回-1。
F_SETLKW：和上面一样，但是不立即返回，阻塞等待锁释放。
F_GETLK：获取锁信息。
struct flock {
        ...
        short l_type;    /* Type of lock: F_RDLCK,
                                    F_WRLCK, F_UNLCK */
        short l_whence;  /* How to interpret l_start:
                                    SEEK_SET, SEEK_CUR, SEEK_END */
        off_t l_start;   /* Starting offset for lock */
        off_t l_len;     /* Number of bytes to lock */
        pid_t l_pid;     /* PID of process blocking our lock
                                    (set by F_GETLK and F_OFD_GETLK) */
        ...
};

注意一点：close掉文件描述符的时候，文件描述符上的锁自动释放
举例说明 进程A对文件加读锁。进程B也对文件加读锁
代码参见pA.c  pB.c pC.c   

A hello 加读锁 保持
C hello 加读锁 可以加锁。 锁的类型改为F_UNLCK
          加写锁 互斥锁     锁的信息更新为A hello这个进程hold着的读锁。
                                  锁的类型为F_RDLCK.

二、系统调用和函数库的关系（文件操作为例）
系统调用   open   close  read  write
库函数     fopen  fclose fread fwrite 

使用库函数对文件的操作，属于缓冲文件操作。
使用系统调用对文件操作，属于非缓冲文件操作。

库函数可以跨平台，但是系统调用不可以。

fopen(3)   调用的时候，先开辟一块内存空见，然后调用open(2)，将open（2）返回的文件描述符存储到FILE结构体的_fileno中。有相应地址存放读写数据区。最后返回一个地址FILE*。

fgetc(3)   调用的时候，先察看缓冲空间是否有数据，如果有立即返回。如果没有数据，向系统申请read(2)调用，然后该调用从头文件读取数据到缓存区，这时候。fgetc获取到数据，返回数据。

fputc(3)   调用的时候，先察看缓冲区是否有空间存放数据。如果有空间，直接将数据存放到该空间。如果没有，向系统申请write(2).将缓存中的数据写入文件，清理缓存，将fputc的数据写入到缓存。函数返回。

flose(3)   调用的时候，首先清理缓存中的数据到文件，然后释放缓存空间，关闭文件描述符

三、文件操作的杂项
mkdir(2)
rmdir(2)
umask(2)
link(2)
unlink(2)
rename(2)
remove(2)
  access(2)
  getcwd(3)
  chdir(2)

文件管理  文件系统 
基本系统调用


四、进程的管理
程序和进程的区别
程序是静态的  是存储在硬盘上的机器指令的集合。
进程是程序运行的实例。是动态的，实在内存中存在的。 

每个进程有自己的pid。每个进程还有自己的户口本（PCB)。
在linux操作系统中，所有的进程是以树状形式组织的。
pstree
应用进程
init是树根，是1号进程。
所有的进程的关系是父子关系或兄弟关系。

ps -aux 察看进程的信息
top 实时监控进程的状态

1、在程序中创建子进程。
fork(2)
#include <unistd.h>
pid_t fork(void);
功能：创建一个子进程
参数：
void
返回值：
-1  错误  在父进程中，子进程不被创建。errno被设置
成功：在父进程中子进程的pid被返回。在在进程中0被返回。

举例说明  使用fork(2)创建子进程
代码参见fork.c
父进程和子进程哪个先执行，不确定。由系统的调度程序来决定

2、进程的退出
return和exit的区别
return 只是从函数返回。并没有结束进程
而exit(3)是结束进程。
#include <stdlib.h>
void exit(int status);
功能：使进程终止
参数：
status：用户指定的进程的退出状态码。
返回值：
不返回
举例说明  exit(3)的使用  代码参见exit.c

父进程创建子进程以后，父进程推出了，但是子进程还没有结束。
那么子进程的父进程就设置为1号进程init。这种子进程称为孤儿进程。

在进程推出以前还需要处理一些事情，将这些需要处理的事情，需要程序员告诉进程。如何告诉进程，需要使用函数atexit(3).
#include <stdlib.h>
int atexit(void (*function)(void));
功能：给进程注册一个函数在进程终止的时候调用
参数：
function：注册给进程的函数，在进程推出的时候，调用这个函数。
返回值：
成功   0
错位   非0  

同一个函数，注册一次，调用一次。
函数的注册顺序和调用顺序相反。
子进程可以继承父进程的注册函数。

举例说明  atexit(3)的使用  代码参见 atexit.c

作业：编写函数，创建一个父进程，多个子进程，这些子进程是兄弟关系。创建多少个子进程，在函数中用参数指定。







