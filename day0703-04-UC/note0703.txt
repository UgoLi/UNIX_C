回忆上周五内容：
一、静态库文件的制作和使用
静态链接
运行时文件
ar命令的扩充

二、环境变量
环境变量的格式
PATH  PS1
三、动态库的制作和使用
可执行文件依赖于动态库。
加载器  链接器
四、动态加载
五、程序中的错误处理
errno 
perror(3)
strerror(3)

今天内容：
一、程序中的错误处理（续）
strerror（3）
#include <string.h>
char *strerror(int errnum);
功能：获取errnum对应的错误信息
参数：
errnum：错误编号
返回值：
char *：
如果找到错误编号对应的描述信息，返回描述信息的首地址。
没找到错误编号，返回字符串"Unknown error nnn"


二、内存管理

页   页表    页框
虚拟内存   物理内存  虚拟地址空间   物理地址


透明   是看不见（玻璃透明，玻璃看不见）
虚拟地址空间（预定）  物理地址（实际）
段错误：虚拟地址没有对应上物理地址
无操作系统直接访问物理地址
硬盘swap分区  虚拟内存
映射的虚拟地址单位是页   一页的大小是4k
物理地址称为页框   映射登记表称为页表
物理内存（内存条、显卡、声卡都有可能有物理内存）
（集成显卡用内存条的部分内存、独显自身有物理内存）
举例说明segment.c
虚拟地址--> 线性地址
冯.诺伊曼体系结构
哈佛体系结构
三、进程的映射
变量或常量在内存中的哪个空间？
每个进程都能访问4G内存空间（32位）
代码段  数据段  栈段  堆

代码段-->只读数据段  数据段 未初始化的数据段 栈段  堆

补充：
运行时文件-->
int main(int argc,char *argv[],char *env[]);
举例说明：
变量 或 常量 在内存的哪个段分配内存空间。 代码参见：memory.c

补充：
每个进程都有自己的身份证号。进程的身份证号就是进程的pid。

如何获取进程自己的pid？
getpid(2);
#include <sys/types.h>
#include <unistd.h>
pid_t getpid(void);
功能：
获取process ID
参数：
void
返回值：
返回进程的id。pid_t

如何查看进程的内存布局？
终端：cat /proc/进程的pid/maps
字符串存放在 代码段中。
局部的指针类型的变量的空间分配在 栈段中。
但是指针的内容在 代码段中 字符串的首地址。

栈段 包含了多个栈帧。
自动的局部变量的空间分配在栈帧里。每个函数调用的时候，都有自己的栈帧。函数调用结束后，帧自动释放。
静态的局部变量的空间分配在进程的数据段里。

全局变量的空间分配在数据段里。

数据段、栈段和代码段的生命周期是进程的生命周期。
而栈帧的生命周期是函数。


extern 扩展变量的作用域。

堆
举例说明  堆的使用  代码参见heap.c
使用free(3)释放掉内存空间  生命周期结束
如果不用free(3)释放，堆的生命周期到进程的结束。

代码段  数据段 栈段（栈帧） 堆



四、使用mmap将物理地址映射到进程的虚拟地址空间
内核态   用户态

linux下一切皆文件
设备是文件   普通文件是文件  文件夹是文件
mmap 可以把文件映射到虚拟内存空间，也可以把硬件映射到虚拟内存。
mmap(2)  系统调用
#include <sys/mman.h>
void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
功能：
创建到进程虚拟地址空间的映射
参数：
add：指定映射区域的起始地址。如果是NULL，内核选择
length：指定映射区域的长度
prot：
1、PROT_EXEC  Pages may be executed1.
2、PROT_READ  Pages may be read.
3、PROT_WRITE Pages may be written.
4、PROT_NONE  Pages may not be accessed.
4 or 1|2|3
flags：
&
MAP_SHARED
MAP_PRIVATE
|
MAP_ANONYMOUS:表示匿名映射。硬件。忽略fd,offset
fd：
offset：
返回值：
成功 返回指向映射区域的地址
失败 返回MAP_FAILED errno被设定

int munmap(void *addr, size_t length);
功能：解除映射
参数：
addr：mmap(2) 的返回值
length：参见mmap（2）的参数，映射区域的长度
返回值：
0 成功
-1 失败 errno

举例说明  将物理地址映射到进程的虚拟地址空间。操作虚拟地址。解除映射。代码参见mmap.c

总结：
一、程序中的错误处理  strerror(3)
二、内存管理的基础
虚拟地址 物理地址
用户态  内核态
三、进程的映射
代码段 数据段 堆 栈
四、使用mmap将物理地址映射到进程的虚拟地址空间。

作业：
编写函数实现字符串的拷贝功能。函数原型如下：
char *t_strcpy(char *dest,const char *src);
实现代码中不允许使用库函数。   




五、malloc的实现原理（缓冲机制）















