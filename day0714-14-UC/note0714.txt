今天的内容：
一、服务器的并发。多进程、多线程、多路复用
多进程实现服务器的并发

举例演示说明  代码参见  server.c  client.c
一个服务进程为客户端提供服务的时候，如果任务比较重。这样势必造成客户端的等待。
为了解决这个问题，引入多进程实现服务器的并发。

 父进程：
1、 负责从未决连接队列中。取出一个客户端的连接，处理这个连接（创建一个和客户端的
 连接，c_fd）。
2、创建子进程  fork(2)
3、关闭和 客户端的通讯 c_fd.
4、子进程退出的时候，负责收尸。非阻塞收尸。
继续循环到第一步

 子进程：
关闭s_fd
子进程利用c_fd和客户端通讯
数据的处理
关闭和客户端的连接
子进程退出

错误问题。地址正在使用。参考：setsockopt(2)

二、基于udp的编程
TCP和UDP的区别
tcp是面向连接的，流式。安全的、可靠的。
UDP是面向包的，不可靠（相对于TCP）。不想要，连接。
服务器端：
1、创建socket文件描述符s_fd。
2、将s_fd和服务器的地址和端口号绑定。
while(1){
    3、调用recvfrom(2)阻塞等待客户端信息的到来
    4、获取到客户端信息，处理信息。
    5、响应客户端信息
}

客户端：
1、创建socket文件描述符s_fd。
2、向服务器发送信息。
3、阻塞等待服务器的响应信息。
4、处理响应信息。
5、关闭本次通讯。

recvfrom(2)**************************************************************
#include <sys/types.h>
#include <sys/socket.h>
    ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, 
                     struct sockaddr *src_addr, socklen_t *addrlen);
    功能：从一个socket上接受一条消息
    参数：
    sockfd：指定一个socket。socket的返回值
    buf：用来存放消息的内存的首地址
    len：存放消息的内存长度
    flags：0
    src_addr：如果不为空，保存源地址;如果为NULL，addrlen也为NULL。
    addrlen：src_addr的大小
    返回值：
    成功   接收到的消息的子节数。
    -1     错误
    0      对方关闭的时候
*************************************************************************

sendto(2)****************************************************************
#include<sys/types.h>
#include<sys/socket.h>
    ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                    const struct sockaddr *dest_addr, socklen_t addrlen);
    功能：在socked上发送消息
    参数：
    sockfd：发送端的sockfd
    buf：要发送的消息存放内存地址
    len：内存长度
    flags：0
    dest_addr：目的地址(目的ip地址和端口号)
    addrlen：制定dest_addr的长度
    返回值：
    -1 错误 errno被设置
    成功 返回发送的字节数

*************************************************************************
举例说明   基于udp的服务器端和客户端编程
代码参见  userv.c  uclie.c

网络通讯就结束了
三、线程管理
什么是线程？
程序执行的路线。
进程和线程的区别？
进程是资源分配的基本单位。
线程是执行的基本单位。
PS：线程共享进程的资源。但是每个线程又有自己私有的资源（栈帧）。

线程的切换开销比较低、效率比较高
进程的切换开销比较高、效率比较低

进程间的通讯不如线程间的通讯方便。
进程有自己的pid。那么线程有自己的tid。(thread id)
使用tid标识一个唯一的线程。

每个进程至少有一个线程，这个线程是进程的主线程。
如何在进程中创建一个新的线程？
thread_creat(3)*************************************************************
#include <pthread.h>
    int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                    void *(*start_routine) (void *), void *arg);

    功能：创建一个新的线程
    参数：
    thread：用来存储新的线程的id。
    attr：NULL 缺省属性。
    start_routine:线程的执行函数。
    arg:是start_routine()的唯一参数。
    返回值：
    0       成功 
    错误    错误码。  thread没有被定义
****************************************************************************
    void *(*start_routine)(void *)
    Compile and link with -pthread.

举例说明   在进程中创建一个新的线程
代码参见   pthread_c.c

获取进程自己的pid。getpid
获取线程自己的tid。pthread_self(3)

pthread_self(3)*************************************************************
#include <pthread.h>
    pthread_t pthread_self(void);
    功能：获取当前线程的id
    参数：
    void
    返回值：
    总是成功，获取当前线程的id
Compile and link with -pthread
****************************************************************************

线程的退出、汇合、分离

线程的退出三种方式。
1、在线程中不能使用exit(3)。
注意   return和exit(3)的区别
return 只是函数的返回
exit(3) 进程的终止
2、线程的终止可以使用pthread_exit(3).
pthread_exit(3)*************************************************************
#include <pthread.h>
    void pthread_exit(void *retval);
    功能：终止当前的线程
    参数：
    retval：通过这个参数传递一个值。传给同一进程当中的另外一个线程。另外一个
            线程调用pthread_join获取这个值。
    返回值：
    没有
Compile and link with -pthread.
****************************************************************************
3、终止其他的线程。pthread_cancel(3)
pthread_cancel(3)***********************************************************
#include <pthread.h>
    int pthread_cancel(pthread_t thread);
    功能：
    参数：
    thread：指定要取消的线程的id。
    返回值：
    0    成功
    非0  错误码
Compile and link with -pthread.
****************************************************************************
线程的会合和分离

在线程创建以后，设置线程为分离状态。设置为分离状态的线程。
在线程终止的时候，自动释放线程的私有资源给系统。
pthread_detach(3)***********************************************************
#include <pthread.h>
    int pthread_detach(pthread_t thread);
    功能：分离一个线程
    参数：
    thread：指定要分离的线程的id。
    返回值：
    0        成功
    非0错误     返回错误码
Compile and link with -pthread.
****************************************************************************
线程的汇合。进程中的一个线程等待要汇合的线程终止，终止的时候
，等待汇合的线程回收终止线程的私有资源，并且回收线程的终止状态。
thread_join(3)**************************************************************
#include <pthread.h>
    int pthread_join(pthread_t thread, void **retval);
    功能：汇合一个终止的线程
    参数：
    thread：指定了要汇合的线程的tid。
    *retval：存放线程的退出状态。
    返回值：
    0       成功
    非0错误 返回错误码
Compile and link with -pthread.
****************************************************************************

总结：
使用多进程实现服务器的并发
基于udp的编程
线程的基础
线程的创建
线程的退出、汇合哦、分离











